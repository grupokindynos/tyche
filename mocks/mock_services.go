// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/grupokindynos/tyche/services (interfaces: HestiaService,PlutusService,AdrestiaService)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/grupokindynos/adrestia-go/models"
	hestia "github.com/grupokindynos/common/hestia"
	plutus "github.com/grupokindynos/common/plutus"
	reflect "reflect"
)

// MockHestiaService is a mock of HestiaService interface
type MockHestiaService struct {
	ctrl     *gomock.Controller
	recorder *MockHestiaServiceMockRecorder
}

// MockHestiaServiceMockRecorder is the mock recorder for MockHestiaService
type MockHestiaServiceMockRecorder struct {
	mock *MockHestiaService
}

// NewMockHestiaService creates a new mock instance
func NewMockHestiaService(ctrl *gomock.Controller) *MockHestiaService {
	mock := &MockHestiaService{ctrl: ctrl}
	mock.recorder = &MockHestiaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHestiaService) EXPECT() *MockHestiaServiceMockRecorder {
	return m.recorder
}

// GetCoinsConfig mocks base method
func (m *MockHestiaService) GetCoinsConfig() ([]hestia.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinsConfig")
	ret0, _ := ret[0].([]hestia.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinsConfig indicates an expected call of GetCoinsConfig
func (mr *MockHestiaServiceMockRecorder) GetCoinsConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinsConfig", reflect.TypeOf((*MockHestiaService)(nil).GetCoinsConfig))
}

// GetShiftStatus mocks base method
func (m *MockHestiaService) GetShiftStatus() (hestia.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShiftStatus")
	ret0, _ := ret[0].(hestia.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShiftStatus indicates an expected call of GetShiftStatus
func (mr *MockHestiaServiceMockRecorder) GetShiftStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShiftStatus", reflect.TypeOf((*MockHestiaService)(nil).GetShiftStatus))
}

// UpdateShift mocks base method
func (m *MockHestiaService) UpdateShift(arg0 hestia.Shift) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShift", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShift indicates an expected call of UpdateShift
func (mr *MockHestiaServiceMockRecorder) UpdateShift(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShift", reflect.TypeOf((*MockHestiaService)(nil).UpdateShift), arg0)
}

// UpdateShiftV2 mocks base method
func (m *MockHestiaService) UpdateShiftV2(arg0 hestia.ShiftV2) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShiftV2", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShiftV2 indicates an expected call of UpdateShiftV2
func (mr *MockHestiaServiceMockRecorder) UpdateShiftV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShiftV2", reflect.TypeOf((*MockHestiaService)(nil).UpdateShiftV2), arg0)
}

// MockPlutusService is a mock of PlutusService interface
type MockPlutusService struct {
	ctrl     *gomock.Controller
	recorder *MockPlutusServiceMockRecorder
}

// MockPlutusServiceMockRecorder is the mock recorder for MockPlutusService
type MockPlutusServiceMockRecorder struct {
	mock *MockPlutusService
}

// NewMockPlutusService creates a new mock instance
func NewMockPlutusService(ctrl *gomock.Controller) *MockPlutusService {
	mock := &MockPlutusService{ctrl: ctrl}
	mock.recorder = &MockPlutusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlutusService) EXPECT() *MockPlutusServiceMockRecorder {
	return m.recorder
}

// GetNewPaymentAddress mocks base method
func (m *MockPlutusService) GetNewPaymentAddress(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewPaymentAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewPaymentAddress indicates an expected call of GetNewPaymentAddress
func (mr *MockPlutusServiceMockRecorder) GetNewPaymentAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewPaymentAddress", reflect.TypeOf((*MockPlutusService)(nil).GetNewPaymentAddress), arg0)
}

// GetWalletBalance mocks base method
func (m *MockPlutusService) GetWalletBalance(arg0 string) (plutus.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalance", arg0)
	ret0, _ := ret[0].(plutus.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalance indicates an expected call of GetWalletBalance
func (mr *MockPlutusServiceMockRecorder) GetWalletBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockPlutusService)(nil).GetWalletBalance), arg0)
}

// SubmitPayment mocks base method
func (m *MockPlutusService) SubmitPayment(arg0 plutus.SendAddressBodyReq) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitPayment", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitPayment indicates an expected call of SubmitPayment
func (mr *MockPlutusServiceMockRecorder) SubmitPayment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitPayment", reflect.TypeOf((*MockPlutusService)(nil).SubmitPayment), arg0)
}

// ValidateRawTx mocks base method
func (m *MockPlutusService) ValidateRawTx(arg0 plutus.ValidateRawTxReq) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRawTx", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRawTx indicates an expected call of ValidateRawTx
func (mr *MockPlutusServiceMockRecorder) ValidateRawTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRawTx", reflect.TypeOf((*MockPlutusService)(nil).ValidateRawTx), arg0)
}

// MockAdrestiaService is a mock of AdrestiaService interface
type MockAdrestiaService struct {
	ctrl     *gomock.Controller
	recorder *MockAdrestiaServiceMockRecorder
}

// MockAdrestiaServiceMockRecorder is the mock recorder for MockAdrestiaService
type MockAdrestiaServiceMockRecorder struct {
	mock *MockAdrestiaService
}

// NewMockAdrestiaService creates a new mock instance
func NewMockAdrestiaService(ctrl *gomock.Controller) *MockAdrestiaService {
	mock := &MockAdrestiaService{ctrl: ctrl}
	mock.recorder = &MockAdrestiaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdrestiaService) EXPECT() *MockAdrestiaServiceMockRecorder {
	return m.recorder
}

// DepositInfo mocks base method
func (m *MockAdrestiaService) DepositInfo(arg0 models.DepositParams) (models.DepositInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositInfo", arg0)
	ret0, _ := ret[0].(models.DepositInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DepositInfo indicates an expected call of DepositInfo
func (mr *MockAdrestiaServiceMockRecorder) DepositInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositInfo", reflect.TypeOf((*MockAdrestiaService)(nil).DepositInfo), arg0)
}

// GetAddress mocks base method
func (m *MockAdrestiaService) GetAddress(arg0 string) (models.AddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", arg0)
	ret0, _ := ret[0].(models.AddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress
func (mr *MockAdrestiaServiceMockRecorder) GetAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockAdrestiaService)(nil).GetAddress), arg0)
}

// GetPath mocks base method
func (m *MockAdrestiaService) GetPath(arg0, arg1 string) (models.PathResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath", arg0, arg1)
	ret0, _ := ret[0].(models.PathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPath indicates an expected call of GetPath
func (mr *MockAdrestiaServiceMockRecorder) GetPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockAdrestiaService)(nil).GetPath), arg0, arg1)
}

// GetTradeStatus mocks base method
func (m *MockAdrestiaService) GetTradeStatus(arg0 hestia.Trade) (hestia.ExchangeOrderInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeStatus", arg0)
	ret0, _ := ret[0].(hestia.ExchangeOrderInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradeStatus indicates an expected call of GetTradeStatus
func (mr *MockAdrestiaServiceMockRecorder) GetTradeStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeStatus", reflect.TypeOf((*MockAdrestiaService)(nil).GetTradeStatus), arg0)
}

// GetWithdrawalTxHash mocks base method
func (m *MockAdrestiaService) GetWithdrawalTxHash(arg0 models.WithdrawInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalTxHash", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalTxHash indicates an expected call of GetWithdrawalTxHash
func (mr *MockAdrestiaServiceMockRecorder) GetWithdrawalTxHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalTxHash", reflect.TypeOf((*MockAdrestiaService)(nil).GetWithdrawalTxHash), arg0)
}

// StockBalance mocks base method
func (m *MockAdrestiaService) StockBalance(arg0 string) (models.BalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StockBalance", arg0)
	ret0, _ := ret[0].(models.BalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StockBalance indicates an expected call of StockBalance
func (mr *MockAdrestiaServiceMockRecorder) StockBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StockBalance", reflect.TypeOf((*MockAdrestiaService)(nil).StockBalance), arg0)
}

// Trade mocks base method
func (m *MockAdrestiaService) Trade(arg0 hestia.Trade) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trade", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Trade indicates an expected call of Trade
func (mr *MockAdrestiaServiceMockRecorder) Trade(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trade", reflect.TypeOf((*MockAdrestiaService)(nil).Trade), arg0)
}

// Withdraw mocks base method
func (m *MockAdrestiaService) Withdraw(arg0 models.WithdrawParams) (models.WithdrawInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", arg0)
	ret0, _ := ret[0].(models.WithdrawInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw
func (mr *MockAdrestiaServiceMockRecorder) Withdraw(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockAdrestiaService)(nil).Withdraw), arg0)
}
